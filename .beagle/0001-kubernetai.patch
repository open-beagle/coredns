From 060166a198174e96b94f337804d8649d147f1547 Mon Sep 17 00:00:00 2001
From: shucheng <shucheng@bd-apaas.com>
Date: Mon, 16 Aug 2021 14:27:53 +0800
Subject: [PATCH] kubernetai

---
 core/dnsserver/zdirectives.go        |   1 +
 core/plugin/zplugin.go               |   1 +
 plugin.cfg                           |   1 +
 plugin/kubernetai/kubernetai.go      | 108 ++++++++++++++++
 plugin/kubernetai/kubernetai_test.go | 179 +++++++++++++++++++++++++++
 plugin/kubernetai/podhandler.go      |  21 ++++
 plugin/kubernetai/setup.go           |  72 +++++++++++
 plugin/kubernetai/setup_test.go      | 140 +++++++++++++++++++++
 8 files changed, 523 insertions(+)
 create mode 100644 plugin/kubernetai/kubernetai.go
 create mode 100644 plugin/kubernetai/kubernetai_test.go
 create mode 100644 plugin/kubernetai/podhandler.go
 create mode 100644 plugin/kubernetai/setup.go
 create mode 100644 plugin/kubernetai/setup_test.go

diff --git a/core/dnsserver/zdirectives.go b/core/dnsserver/zdirectives.go
index 4726345e..0f86c829 100644
--- a/core/dnsserver/zdirectives.go
+++ b/core/dnsserver/zdirectives.go
@@ -46,6 +46,7 @@ var Directives = []string{
 	"clouddns",
 	"k8s_external",
 	"kubernetes",
+	"kubernetai",
 	"file",
 	"auto",
 	"secondary",
diff --git a/core/plugin/zplugin.go b/core/plugin/zplugin.go
index eee81391..1340cd64 100644
--- a/core/plugin/zplugin.go
+++ b/core/plugin/zplugin.go
@@ -29,6 +29,7 @@ import (
 	_ "github.com/coredns/coredns/plugin/health"
 	_ "github.com/coredns/coredns/plugin/hosts"
 	_ "github.com/coredns/coredns/plugin/k8s_external"
+	_ "github.com/coredns/coredns/plugin/kubernetai"
 	_ "github.com/coredns/coredns/plugin/kubernetes"
 	_ "github.com/coredns/coredns/plugin/loadbalance"
 	_ "github.com/coredns/coredns/plugin/local"
diff --git a/plugin.cfg b/plugin.cfg
index 58f17679..6da232af 100644
--- a/plugin.cfg
+++ b/plugin.cfg
@@ -55,6 +55,7 @@ azure:azure
 clouddns:clouddns
 k8s_external:k8s_external
 kubernetes:kubernetes
+kubernetai:kubernetai
 file:file
 auto:auto
 secondary:secondary
diff --git a/plugin/kubernetai/kubernetai.go b/plugin/kubernetai/kubernetai.go
new file mode 100644
index 00000000..61a34f44
--- /dev/null
+++ b/plugin/kubernetai/kubernetai.go
@@ -0,0 +1,108 @@
+package kubernetai
+
+import (
+	"context"
+
+	"github.com/coredns/coredns/plugin"
+	"github.com/coredns/coredns/plugin/kubernetes"
+	clog "github.com/coredns/coredns/plugin/pkg/log"
+	"github.com/coredns/coredns/request"
+	"github.com/miekg/dns"
+)
+
+var log = clog.NewWithPlugin("kubernetai")
+
+// Kubernetai handles multiple Kubernetes
+type Kubernetai struct {
+	Zones          []string
+	Kubernetes     []*kubernetes.Kubernetes
+	autoPathSearch []string // Local search path from /etc/resolv.conf. Needed for autopath.
+	p              podHandlerItf
+}
+
+// New creates a Kubernetai containing one Kubernetes with zones
+func New(zones []string) (Kubernetai, *kubernetes.Kubernetes) {
+	h := Kubernetai{
+		autoPathSearch: searchFromResolvConf(),
+		p:              &podHandler{},
+	}
+	k := kubernetes.New(zones)
+	h.Kubernetes = append(h.Kubernetes, k)
+	return h, k
+}
+
+// ServeDNS routes requests to the authoritative kubernetes. It implements the plugin.Handler interface.
+func (k8i Kubernetai) ServeDNS(ctx context.Context, w dns.ResponseWriter, r *dns.Msg) (rcode int, err error) {
+	return k8i.Kubernetes[0].ServeDNS(ctx, w, r)
+}
+
+// AutoPath routes AutoPath requests to the authoritative kubernetes.
+func (k8i Kubernetai) AutoPath(state request.Request) []string {
+	var searchPath []string
+
+	// Abort if zone is not in kubernetai stanza.
+	var zMatch bool
+	for _, k8s := range k8i.Kubernetes {
+		zone := plugin.Zones(k8s.Zones).Matches(state.Name())
+		if zone != "" {
+			zMatch = true
+			break
+		}
+	}
+	if !zMatch {
+		return nil
+	}
+
+	// Add autopath result for the handled zones
+	for _, k := range k8i.Kubernetes {
+		pod := k8i.p.PodWithIP(*k, state.IP())
+		if pod == nil {
+			return nil
+		}
+
+		search := make([]string, 3)
+		for _, z := range k.Zones {
+			if z == "." {
+				search[0] = pod.Namespace + ".svc."
+				search[1] = "svc."
+				search[2] = "."
+			} else {
+				search[0] = pod.Namespace + ".svc." + z
+				search[1] = "svc." + z
+				search[2] = z
+			}
+			searchPath = append(search, searchPath...)
+		}
+	}
+	searchPath = append(searchPath, k8i.autoPathSearch...)
+	searchPath = append(searchPath, "")
+	log.Debugf("Autopath search path for '%s' will be '%v'", state.Name(), searchPath)
+	return searchPath
+}
+
+func searchFromResolvConf() []string {
+	rc, err := dns.ClientConfigFromFile("/etc/resolv.conf")
+	if err != nil {
+		return nil
+	}
+	plugin.Zones(rc.Search).Normalize()
+	return rc.Search
+}
+
+// Health implements the health.Healther interface.
+func (k8i Kubernetai) Health() bool {
+	healthy := true
+	for _, k := range k8i.Kubernetes {
+		healthy = healthy && k.APIConn.HasSynced()
+		if !healthy {
+			break
+		}
+	}
+	return healthy
+}
+
+// Name implements the Handler interface.
+func (Kubernetai) Name() string { return Name() }
+
+// Name is the name of the plugin.
+func Name() string { return "kubernetai" }
diff --git a/plugin/kubernetai/kubernetai_test.go b/plugin/kubernetai/kubernetai_test.go
new file mode 100644
index 00000000..f713336f
--- /dev/null
+++ b/plugin/kubernetai/kubernetai_test.go
@@ -0,0 +1,179 @@
+package kubernetai
+
+import (
+	"net"
+	"reflect"
+	"testing"
+
+	"github.com/coredns/coredns/plugin"
+	"github.com/coredns/coredns/plugin/kubernetes"
+	"github.com/coredns/coredns/plugin/kubernetes/object"
+	"github.com/coredns/coredns/request"
+	"github.com/miekg/dns"
+)
+
+type k8iPodHandlerTester struct{}
+
+var podip string
+
+func (k8i *k8iPodHandlerTester) PodWithIP(k kubernetes.Kubernetes, ip string) *object.Pod {
+	if ip == "" {
+		return nil
+	}
+	pod := &object.Pod{
+		Namespace: "test-1",
+		PodIP:     ip,
+	}
+	return pod
+}
+
+var k8iPodHandlerTest k8iPodHandlerTester
+
+type responseWriterTest struct {
+	dns.ResponseWriter
+}
+
+func (res *responseWriterTest) RemoteAddr() net.Addr {
+	ip := net.ParseIP(podip)
+	return &net.UDPAddr{
+		IP:   ip,
+		Port: 53,
+	}
+}
+
+func TestKubernetai_AutoPath(t *testing.T) {
+	type fields struct {
+		Zones          []string
+		Next           plugin.Handler
+		Kubernetes     []*kubernetes.Kubernetes
+		autoPathSearch []string
+		p              *k8iPodHandlerTester
+	}
+	type args struct {
+		state request.Request
+	}
+
+	w := &responseWriterTest{}
+
+	k8sClusterLocal := &kubernetes.Kubernetes{
+		Zones: []string{
+			"cluster.local.",
+		},
+	}
+	k8sFlusterLocal := &kubernetes.Kubernetes{
+		Zones: []string{
+			"fluster.local.",
+		},
+	}
+	defaultK8iConfig := fields{
+		Kubernetes: []*kubernetes.Kubernetes{
+			k8sFlusterLocal,
+			k8sClusterLocal,
+		},
+		p: &k8iPodHandlerTest,
+	}
+
+	tests := []struct {
+		name   string
+		fields fields
+		args   args
+		want   []string
+		ip     string
+	}{
+		{
+			name:   "standard autopath cluster.local",
+			fields: defaultK8iConfig,
+			args: args{
+				state: request.Request{
+					W: w,
+					Req: &dns.Msg{
+						Question: []dns.Question{
+							{Name: "svc-1-a.test-1.svc.cluster.local.", Qtype: 1, Qclass: 1},
+						},
+					},
+				},
+			},
+			want: []string{"test-1.svc.cluster.local.", "svc.cluster.local.", "cluster.local.", "test-1.svc.fluster.local.", "svc.fluster.local.", "fluster.local.", ""},
+			ip:   "172.17.0.7",
+		},
+		{
+			name:   "standard autopath servicename.svc",
+			fields: defaultK8iConfig,
+			args: args{
+				state: request.Request{
+					W: w,
+					Req: &dns.Msg{
+						Question: []dns.Question{
+							{Name: "svc-2-a.test-2.test-1.svc.cluster.local.", Qtype: 1, Qclass: 1},
+						},
+					},
+				},
+			},
+			want: []string{"test-1.svc.cluster.local.", "svc.cluster.local.", "cluster.local.", "test-1.svc.fluster.local.", "svc.fluster.local.", "fluster.local.", ""},
+			ip:   "172.17.0.7",
+		},
+		{
+			name:   "standard autopath lookup fluster in cluster.local",
+			fields: defaultK8iConfig,
+			args: args{
+				state: request.Request{
+					W: w,
+					Req: &dns.Msg{
+						Question: []dns.Question{
+							{Name: "svc-d.test-2.svc.fluster.local.svc.cluster.local.", Qtype: 1, Qclass: 1},
+						},
+					},
+				},
+			},
+			want: []string{"test-1.svc.cluster.local.", "svc.cluster.local.", "cluster.local.", "test-1.svc.fluster.local.", "svc.fluster.local.", "fluster.local.", ""},
+			ip:   "172.17.0.7",
+		},
+		{
+			name:   "not in zone",
+			fields: defaultK8iConfig,
+			args: args{
+				state: request.Request{
+					W: w,
+					Req: &dns.Msg{
+						Question: []dns.Question{
+							{Name: "svc-1-a.test-1.svc.zone.local.", Qtype: 1, Qclass: 1},
+						},
+					},
+				},
+			},
+			ip:   "172.17.0.7",
+			want: nil,
+		},
+		{
+			name:   "requesting pod does not exist",
+			fields: defaultK8iConfig,
+			args: args{
+				state: request.Request{
+					W: w,
+					Req: &dns.Msg{
+						Question: []dns.Question{
+							{Name: "svc-1-a.test-1.svc.zone.local.", Qtype: 1, Qclass: 1},
+						},
+					},
+				},
+			},
+			ip:   "",
+			want: nil,
+		},
+	}
+
+	for _, tt := range tests {
+		t.Run(tt.name, func(t *testing.T) {
+			k8i := Kubernetai{
+				Zones:          tt.fields.Zones,
+				Kubernetes:     tt.fields.Kubernetes,
+				autoPathSearch: tt.fields.autoPathSearch,
+				p:              tt.fields.p,
+			}
+			podip = tt.ip
+			if got := k8i.AutoPath(tt.args.state); !reflect.DeepEqual(got, tt.want) {
+				t.Errorf("Kubernetai.AutoPath() = %+v, want %+v", got, tt.want)
+			}
+		})
+	}
+}
diff --git a/plugin/kubernetai/podhandler.go b/plugin/kubernetai/podhandler.go
new file mode 100644
index 00000000..dcc060f0
--- /dev/null
+++ b/plugin/kubernetai/podhandler.go
@@ -0,0 +1,21 @@
+package kubernetai
+
+import (
+	"github.com/coredns/coredns/plugin/kubernetes"
+	"github.com/coredns/coredns/plugin/kubernetes/object"
+)
+
+type podHandlerItf interface {
+	PodWithIP(k kubernetes.Kubernetes, ip string) *object.Pod
+}
+
+type podHandler struct{}
+
+// podWithIP return the api.Pod for source IP ip. It returns nil if nothing can be found.
+func (p *podHandler) PodWithIP(k kubernetes.Kubernetes, ip string) *object.Pod {
+	ps := k.APIConn.PodIndex(ip)
+	if len(ps) == 0 {
+		return nil
+	}
+	return ps[0]
+}
diff --git a/plugin/kubernetai/setup.go b/plugin/kubernetai/setup.go
new file mode 100644
index 00000000..c287754d
--- /dev/null
+++ b/plugin/kubernetai/setup.go
@@ -0,0 +1,72 @@
+package kubernetai
+
+import (
+	"context"
+	"errors"
+
+	"github.com/coredns/caddy"
+	"github.com/coredns/coredns/core/dnsserver"
+	"github.com/coredns/coredns/plugin"
+	"github.com/coredns/coredns/plugin/kubernetes"
+)
+
+func init() {
+	caddy.RegisterPlugin(Name(), caddy.Plugin{
+		ServerType: "dns",
+		Action:     setup,
+	})
+}
+
+func setup(c *caddy.Controller) error {
+	k8i, err := Parse(c)
+	if err != nil {
+		return plugin.Error(Name(), err)
+	}
+
+	prev := &kubernetes.Kubernetes{}
+	for _, k := range k8i.Kubernetes {
+		onStart, onShut, err := k.InitKubeCache(context.Background())
+		if err != nil {
+			return plugin.Error(Name(), err)
+		}
+		if onShut != nil {
+			c.OnShutdown(onShut)
+		}
+		if onStart != nil {
+			c.OnStartup(onStart)
+		}
+		// set Next of the previous kubernetes instance to the current instance
+		prev.Next = k
+		prev = k
+	}
+
+	dnsserver.GetConfig(c).AddPlugin(func(next plugin.Handler) plugin.Handler {
+		// set Next of the last kubernetes instance to the next plugin
+		k8i.Kubernetes[len(k8i.Kubernetes)-1].Next = next
+		return k8i
+	})
+
+	return nil
+}
+
+// Parse parses multiple kubernetes into a kubernetai
+func Parse(c *caddy.Controller) (*Kubernetai, error) {
+	var k8i = &Kubernetai{
+		autoPathSearch: searchFromResolvConf(),
+		p:              &podHandler{},
+	}
+
+	for c.Next() {
+		k8s, err := kubernetes.ParseStanza(c)
+		if err != nil {
+			return nil, err
+		}
+		k8i.Kubernetes = append(k8i.Kubernetes, k8s)
+	}
+
+	if len(k8i.Kubernetes) == 0 {
+		return nil, errors.New("no kubernetes instance was parsed")
+	}
+
+	return k8i, nil
+}
diff --git a/plugin/kubernetai/setup_test.go b/plugin/kubernetai/setup_test.go
new file mode 100644
index 00000000..e0b3bdfe
--- /dev/null
+++ b/plugin/kubernetai/setup_test.go
@@ -0,0 +1,140 @@
+package kubernetai
+
+import (
+	"context"
+	"testing"
+
+	"github.com/miekg/dns"
+
+	"github.com/coredns/coredns/plugin/kubernetes"
+
+	"github.com/coredns/caddy"
+	"github.com/coredns/coredns/core/dnsserver"
+	"github.com/coredns/coredns/plugin"
+)
+
+func TestSetup(t *testing.T) {
+	tests := []struct {
+		input     string
+		instances int
+		hasNext   bool
+	}{
+		{
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+			`,
+			instances: 1,
+			hasNext:   false,
+		},
+		{
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+				kubernetai assemblage.local {
+				  endpoint http://192.168.99.101
+				}
+			`,
+			instances: 2,
+			hasNext:   false,
+		}, {
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+				kubernetai assemblage.local {
+				  endpoint http://192.168.99.101
+				}
+				kubernetai conglomeration.local {
+				  endpoint http://192.168.99.102
+				}
+			`,
+			instances: 3,
+			hasNext:   false,
+		},
+		{
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+			`,
+			instances: 1,
+			hasNext:   true,
+		},
+		{
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+				kubernetai assemblage.local {
+				  endpoint http://192.168.99.101
+				}
+			`,
+			instances: 2,
+			hasNext:   true,
+		}, {
+			input: `
+				kubernetai cluster.local {
+				  endpoint http://192.168.99.100
+				}
+				kubernetai assemblage.local {
+				  endpoint http://192.168.99.101
+				}
+				kubernetai conglomeration.local {
+				  endpoint http://192.168.99.102
+				}
+			`,
+			instances: 3,
+			hasNext:   true,
+		},
+	}
+
+	for i, test := range tests {
+		var nextHandler plugin.Handler
+		if test.hasNext {
+			handlerFunc := plugin.HandlerFunc(func(_ context.Context, _ dns.ResponseWriter, _ *dns.Msg) (int, error) {
+				return 0, nil
+			})
+			nextHandler = &handlerFunc
+		}
+
+		c := caddy.NewTestController("dns", test.input)
+
+		if err := setup(c); err != nil {
+			t.Fatalf("Test %d: %v", i, err)
+		}
+
+		plugins := dnsserver.GetConfig(c).Plugin
+		if n := len(plugins); n != 1 {
+			t.Fatalf("Test %d: Expected plugin length on controller to be 1, got %d", i, n)
+		}
+
+		handler := plugins[0](nextHandler)
+
+		k8i, ok := handler.(*Kubernetai)
+		if !ok {
+			t.Fatalf("Test %d: Expected handler to be Kubernetai, got %T", i, handler)
+		}
+
+		if n := len(k8i.Kubernetes); n != test.instances {
+			t.Fatalf("Test %d: Expected kubernetes length on handler to be %d, got %d", i, test.instances, n)
+		}
+
+		prev := &kubernetes.Kubernetes{
+			Next: k8i.Kubernetes[0],
+		}
+		for j, k := range k8i.Kubernetes {
+			if prev.Next != k {
+				t.Fatalf("Test %d: Expected kubernetes instance %d to be referencing kubernetes instance %d as next, got %v", i, j-1, j, prev.Next)
+			}
+
+			prev = k
+		}
+
+		if prev.Next != nextHandler {
+			t.Fatalf("Test %d: Expected last kubernetes instance to be referencing nextHandler as next, got %v", i, prev.Next)
+		}
+	}
+}
-- 
2.25.1

